openapi: 3.0.0
info:
  title: Swagger BookStore
  description: |
    Book Store  - Software Development - Mini project 2.
  contact:
    name: Developer - Fedor Vlasov
    email: AD9348@student.jamk.fi
  license:
    name: CoDeveloper - Khan Md Nayeem Hasan
    url: mailto:nayeembracu29@gmail.com
  version: 1.0.2
servers:
  - url: https://virtserver.swaggerhub.com/FGVLASOV_1/SofDev_Books_store/1.0.2
    description: SwaggerHub API Auto Mocking
  - url: https://bookstore.swagger.io/v2
tags:
  - name: book
    description: Store your best Books
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /book:
    put:
      tags:
        - book
      summary: Update an existing book
      operationId: updateBook
      requestBody:
        $ref: "#/components/requestBodies/Book"
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
        "405":
          description: Validation exception
      security:
        - bookstore_auth:
            - write:books
            - read:books
      x-swagger-router-controller: Book
    post:
      tags:
        - book
      summary: Add a new book to the store
      operationId: addBook
      requestBody:
        $ref: "#/components/requestBodies/Book"
      responses:
        "405":
          description: Invalid input
      security:
        - bookstore_auth:
            - write:books
            - read:books
      x-swagger-router-controller: Book
  /book/{bookId}:
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
            application/xml:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
      security:
        - api_key: []
      x-swagger-router-controller: Book
    post:
      tags:
        - book
      summary: Updates a book in       the store with form data
      operationId: updateBookWithForm
      parameters:
        - name: bookId
          in: path
          description: ID of book that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/book_bookId_body"
      responses:
        "405":
          description: Invalid input
      security:
        - bookstore_auth:
            - write:books
            - read:books
      x-swagger-router-controller: Book
    delete:
      tags:
        - book
      summary: Deletes a book
      operationId: deleteBook
      parameters:
        - name: api_key
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: bookId
          in: path
          description: Book id to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
      security:
        - bookstore_auth:
            - write:books
            - read:books
      x-swagger-router-controller: Book
  /book/findByStatus:
    get:
      tags:
        - book
      summary: Finds Books by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findBooksByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - available
                - pending
                - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "400":
          description: Invalid status value
      security:
        - bookstore_auth:
            - write:books
            - read:books
      x-swagger-router-controller: Book
  /book/findByTitle:
    get:
      tags:
        - book
      summary: Finds books by title
      description: Returns a list of books with titles matching the search query
      operationId: findBooksByTitle
      parameters:
        - name: title
          in: query
          description: The title to search for
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "404":
          description: No books found for the specified title
      security:
        - bookstore_auth:
            - read:books
      x-swagger-router-controller: Book
  /book/findByAuthor:
    get:
      tags:
        - book
      summary: Finds books by author
      description: Returns a list of books by the specified author
      operationId: findBooksByAuthor
      parameters:
        - name: author
          in: query
          description: The author to search for
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "404":
          description: No books found for the specified author
      security:
        - bookstore_auth:
            - read:books
      x-swagger-router-controller: Book
  /book/{bookId}/uploadPdf:
    post:
      tags:
        - book
      summary: Uploads a book PDF file
      operationId: uploadFile
      parameters:
        - name: bookId
          in: path
          description: ID of book to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - bookstore_auth:
            - write:books
            - read:books
      x-swagger-router-controller: Book
  /books:
    get:
      tags:
        - book
      summary: Get a list of books
      operationId: getBooks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "404":
          description: No books found
      security:
        - bookstore_auth:
            - read:books
      x-swagger-router-controller: Book
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged-in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        default:
          description: Successful operation
      x-swagger-router-controller: User
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates a list of users with the given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: Successful operation
      x-swagger-router-controller: User
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates a list of users with the given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: Successful operation
      x-swagger-router-controller: User
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The username for login
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          headers:
            X-Rate-Limit:
              description: Calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: Date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
      x-swagger-router-controller: User
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out the current logged-in user session
      operationId: logoutUser
      responses:
        default:
          description: Successful operation
      x-swagger-router-controller: User
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by username
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged-in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: Name that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged-in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bookId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Book:
      required:
        - ISBN
        - author
        - category
        - description
        - fileUrl
        - language
        - pages
        - thumbnailUrl
        - title
        - year
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        author:
          type: string
        number:
          type: integer
        year:
          type: integer
        ISBN:
          type: string
        description:
          type: string
        thumbnailUrl:
          type: string
        fileUrl:
          type: string
        pages:
          type: integer
        category:
          type: string
        language:
          type: string
      example:
        number: 0
        pages: 1
        ISBN: ISBN
        year: 6
        author: author
        description: description
        fileUrl: fileUrl
        language: language
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        title: title
        category: category
        thumbnailUrl: thumbnailUrl
      xml:
        name: Book
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      example:
        code: 0
        type: type
        message: message
    book_bookId_body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the book
        status:
          type: string
          description: Updated status of the book
  requestBodies:
    Book:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Book"
        application/xml:
          schema:
            $ref: "#/components/schemas/Book"
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      required: true
  securitySchemes:
    bookstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://bookstore.swagger.io/oauth/dialog
          scopes:
            write:books: modify books in your account
            read:books: read your books
    api_key:
      type: apiKey
      name: api_key
      in: header
